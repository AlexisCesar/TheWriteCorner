version: '3.7'
services:
  portainer:
    image: portainer/portainer-ce:latest
    restart: always
    container_name: portainer
    ports:
      - '8000:8000'
      - '9443:9000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
  articles_management_db:
    image: mongo:latest
    restart: always
    volumes:
      - mongoManagement:/data/db
      - ./init-articles-management.js:/docker-entrypoint-initdb.d/init-articles-management.js
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: Database2023
    container_name: articles_management_db
    networks:
      - articles-management-network
  articles_search_db:
    image: mongo:latest
    restart: always
    volumes:
      - mongoSearch:/data/db
      - ./init-articles-search.js:/docker-entrypoint-initdb.d/init-articles-search.js
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: Database2023
    container_name: articles_search_db
    networks:
      - articles-search-network
  articles_api:
    build: ./ArticlesAPI
    container_name: articles_api
    networks:
      - articles-management-network
      - messaging-network
      - api-gateway
    volumes:
      - ./ArticlesAPI/logs:/app/logs
    depends_on:
      broker:
        condition: service_healthy  
  articles_search:
    build: ./ArticlesSearchAPI
    container_name: articles_search
    networks:
      - articles-search-network
    volumes:
      - ./ArticlesSearchAPI/logs:/app/logs
  broker:
    image: rabbitmq:3.11-management
    container_name: articles_broker
    ports:
      - 15672:15672
    healthcheck:
        test: rabbitmq-diagnostics -q ping
        interval: 30s
        timeout: 30s
        retries: 3
    networks:
      - messaging-network
  update_articles_full_text_search:
    build: ./UpdateArticlesFullTextSearch   
    container_name: update_articles_full_text_search
    networks:
      - messaging-network
      - articles-search-network
    stdin_open: true
    tty: true  
    depends_on:
      broker:
        condition: service_healthy
    volumes:
      - ./UpdateArticlesFullTextSearch/logs:/app/logs
  auth_db:
    image: mysql
    restart: always
    container_name: auth_db
    volumes:
      - authdb:/var/lib/mysql
    environment:
      MYSQL_DATABASE: 'articles_auth'
      MYSQL_ROOT_PASSWORD: root
    networks:
      - auth-network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 10s
      retries: 3
  auth_api:
    build: ./AuthAPI
    container_name: auth_api
    networks:
      - auth-network
      - messaging-network
      - api-gateway
    volumes:
      - ./AuthAPI/logs:/app/logs
    depends_on:
      auth_db:
        condition: service_healthy
      broker:
        condition: service_healthy
  send_article_notification:
    build: ./SendArticleNotification
    container_name: send_article_notification
    networks:
      - messaging-network
      - notification-network
    stdin_open: true
    tty: true
    depends_on:
      broker:
        condition: service_healthy
      notification_db:
        condition: service_healthy
    volumes:
      - ./SendArticleNotification/logs:/app/logs
  notification_db:
    image: mysql
    restart: always
    container_name: notification_db
    volumes:
      - notificationdb:/var/lib/mysql
    environment:
      MYSQL_DATABASE: 'articles_notification'
      MYSQL_ROOT_PASSWORD: root
    networks:
      - notification-network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 10s
      retries: 3
  api_gateway:
    build: ./ApiGateway
    ports:
      - '80:80'
    container_name: api_gateway
    networks:
      - api-gateway
    depends_on:
      - articles_api
      - auth_api
      - articles_search
volumes:
  mongoManagement:
  mongoSearch:
  portainer_data:
  authdb:
  notificationdb:
networks:
  articles-management-network:
    driver: bridge
  articles-search-network:
    driver: bridge
  messaging-network:
    driver: bridge
  auth-network:
    driver: bridge
  notification-network:
    driver: bridge
  api-gateway:
    driver: bridge
